2023-02-04 14:52:11,226 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.6:/usr/local/cuda-11.X
GCC: gcc (GCC) 11.2.0
PyTorch: 1.12.1+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2.1  (built against CUDA 11.3)
    - Built with CuDNN 8.3.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu116
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-04 14:52:11,226 - mmcls - INFO - Distributed training: False
2023-02-04 14:52:11,337 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=34,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'CustomDataset'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        classes=['daisy', 'dandelion', 'rose', 'sunflower', 'tulip'],
        ann_file='data/flower_dataset/train.txt'),
    val=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes=['daisy', 'dandelion', 'rose', 'sunflower', 'tulip']),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=10)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0ach/run/mmclassification-master/checkpoints/resnet34_8xb32_in1k_20210831-f257d4e6.pth'
resume_from = None
workflow = [('train', 1)]
classes = ['daisy', 'dandelion', 'rose', 'sunflower', 'tulip']
work_dir = 'work'
gpu_ids = [0]

2023-02-04 14:52:11,338 - mmcls - INFO - Set random seed to 1065463653, deterministic: False
2023-02-04 14:52:13,859 - mmcls - INFO - load checkpoint from local path: /HOME/scz0ach/run/mmclassification-master/checkpoints/resnet34_8xb32_in1k_20210831-f257d4e6.pth
2023-02-04 14:52:13,977 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-04 14:52:13,979 - mmcls - INFO - Start running, host: scz0ach@g0097, work_dir: /data/run01/scz0ach/mmclassification-master/work
2023-02-04 14:52:13,979 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 14:52:13,979 - mmcls - INFO - workflow: [('train', 1)], max: 10 epochs
2023-02-04 14:52:13,979 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0ach/mmclassification-master/work by HardDiskBackend.
2023-02-04 14:52:49,077 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 14:52:54,364 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-04 14:52:59,810 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 14:53:00,893 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-04 14:53:06,412 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 14:53:07,495 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 14:53:12,966 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 14:53:14,046 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-04 14:53:19,466 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 14:53:20,543 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 14:53:26,047 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 14:53:27,195 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 14:53:32,633 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 14:53:33,715 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 14:53:39,212 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 14:53:40,302 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 14:53:45,757 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 14:53:46,826 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 14:53:52,293 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 14:53:53,387 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
